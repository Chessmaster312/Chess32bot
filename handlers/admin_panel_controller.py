import asyncio

import requests
from aiogram.fsm.context import FSMContext

import bootstrap
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from settings import config
from states import AdminSupportStates
from websocket import wsManager

bot = bootstrap.MyBot().getInstance()
dp = bootstrap.MyDispatcher().getInstance()
db = bootstrap.DB().getInstance()
back = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data="back")]])


async def send_message(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úâ–†–∞—Å—Å—ã–ª–∫–∞', callback_data="spam")],
        [InlineKeyboardButton(text='ü§ñBotstat', url='https://botstat.io/')],
        [InlineKeyboardButton(text='üîó–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª', callback_data="channel")],
        [InlineKeyboardButton(text='üí±–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞', callback_data="priz")],
        [InlineKeyboardButton(text='‚ûï–î–æ–±–∞–≤–∏—Ç—å utm —Å—Å—ã–ª–∫—É', callback_data="utm")],
        [InlineKeyboardButton(text='üë®‚Äçüè≠–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤—ã–ø–ª–∞—Ç', callback_data="link_get_priz")],
        [InlineKeyboardButton(text='üë®‚Äçüíº–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞', callback_data="admins_list")],
        [InlineKeyboardButton(text='‚ÑπÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π', callback_data="info")],
        [InlineKeyboardButton(text='‚ùå–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å', callback_data="close")]])
    await message.answer(f'*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä*\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(wsManager.connected_users)}\n–í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä: {await db.games_count()}\n\n'
                         f'*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Ä–µ—Ñ–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é: {await db.get_all_ref_week()}',
                         reply_markup=keyboard, parse_mode="markdown")


async def send_default(message: CallbackQuery|Message, state: FSMContext, name=None):
    if isinstance(message, CallbackQuery):
        answer_message=message.message
    else:
        answer_message = message
    match name or message.data:
        case "channel":
            await state.set_state(AdminSupportStates.channel)
            msg = await answer_message.answer(
                f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞(–≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)\n'
                f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {config.channel}', reply_markup=back)
            await state.set_data({"new_message":msg})
        case "priz":
            await state.set_state(AdminSupportStates.priz)
            msg = await answer_message.answer(
                f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n'
                f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {config.priz}', reply_markup=back)
            await state.set_data({"new_message": msg})
        case "link_get_priz":
            await state.set_state(AdminSupportStates.link_get_priz)
            msg = await answer_message.answer(
                f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç\n'
                f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {config.link_get_priz}', reply_markup=back)
            await state.set_data({"new_message": msg})
        case "admins_list":
            msg = await send_staff_list(answer_message, state)
            await state.set_data({"new_message": msg})
        case "spam":
            await state.set_state(AdminSupportStates.Spam_Input)
            await answer_message.answer('–û—Ç–ø—Ä–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Å–º–æ–≥—É —Ä–∞–∑–æ—Å–ª–∞—Ç—å')
        case "utm":
            await state.set_state(AdminSupportStates.utm)
            text=''
            for i, (k, v) in enumerate(config.utm.items()):
                text += f"*‚Ññ{i}*:\n"+f"*–°—Å—ã–ª–∫–∞*:`https://t.me/Chess32bot?start={k}`\n"+f"*–ü–µ—Ä–µ—Ö–æ–¥—ã*:{v}\n\n"
            msg = await answer_message.answer(f"–û–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å\n\n{text or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}", reply_markup=back, parse_mode="markdown")
            await state.set_data({"new_message": msg})
        case "info":
            await state.set_state(AdminSupportStates.info)
            msg = await answer_message.answer(
                f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n'
                f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {config.info}', reply_markup=back)
            await state.set_data({"new_message": msg})
        case "back":
            await send_message(answer_message)
            await state.clear()
    msg = await dp.fsm.storage.get_data(bot, answer_message.chat.id)
    await msg.delete()
    await message.answer()


async def edit_default(message: Message, state: FSMContext):
    current_state = await state.get_state()
    attr = str(current_state).split(":")[1]
    if attr == "link_get_priz":
        request = requests.get(message.text)
        if request.status_code != 200:
            await message.answer('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å')
            return
    elif attr == "utm":
        if message.text.isdigit():
            config.utm.pop(list(config.utm.keys())[int(message.text)], None)
        else:
            config.utm.update({f"utm_{message.text}": 0})
        setattr(config, "utm", config.utm)
    elif attr == "admins_list":
        data = message.forward_from
        if data is None:
            await message.answer('–ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
            return
        user_id = data.id
        username = data.username or data.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if any(user_id == item[0] for item in config.admins_list):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        config.admins_list.append([user_id, username])
    elif attr == 'Spam_Input':
        users = await db.get_users()
        await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞')
        count = 0
        for user in users:
            try:
                await bot.copy_message(user[0], message.chat.id, message.message_id)
                await asyncio.sleep(1)
                count += 1
            except:
                continue
        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —á–∞—Ç–æ–≤ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ: {count}')
        await state.clear()
        await send_message(message)
        return
    else:
        setattr(config, attr, message.text)
    old_message = await state.get_data()
    await old_message.get("new_message").delete()
    await state.clear()
    await send_default(message, state, attr)
    await message.delete()


async def send_staff_list(message, state):
    await state.set_state(AdminSupportStates.admins_list)
    buttons = [[InlineKeyboardButton(text=staff[1], url=f'tg://openmessage?user_id={staff[0]}'),
                InlineKeyboardButton(text="‚úñÔ∏è", callback_data=str(i))] for i, staff in
               enumerate(config.admins_list)]
    buttons.append(back.inline_keyboard[0])
    kbd = InlineKeyboardMarkup(
        inline_keyboard=buttons)

    await message.answer(
        '–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å', reply_markup=kbd)


async def delete_staff(message: CallbackQuery, state: FSMContext):
    config.admins_list.pop(int(message.data))
    await message.message.delete()
    return await send_staff_list(message, state)
